<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/aircraft-management-service/src/main/java/com/flightops/aircraft/config/RabbitMQConfig.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/controller/AircraftController.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/dto/AircraftDTO.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/entity/Aircraft.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/repository/AircraftRepository.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftService.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftServiceImpl.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/src/main/java/com/flightops/aircraft/AircraftServiceApp.java;C:/Development/Flight-Ops-clould-app/aircraft-management-service/pom.xml;C:/Development/Flight-Ops-clould-app/aircraft-management-service/README.md;C:/Development/Flight-Ops-clould-app/config-server/src/main/java/com/flightops/config/ConfigServerApplication.java;C:/Development/Flight-Ops-clould-app/config-server/pom.xml;C:/Development/Flight-Ops-clould-app/config-server/README.md;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/config/RabbitMQConfig.java;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/controller/CrewController.java;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/dto/CrewDTO.java;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/entity/Crew.java;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/repository/CrewRepository.java;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/service/CrewService.java;C:/Development/Flight-Ops-clould-app/crew-management-service/src/main/java/com/flightops/crew/service/CrewServiceImpl.java;C:/Development/Flight-Ops-clould-app/crew-management-service/pom.xml;C:/Development/Flight-Ops-clould-app/crew-management-service/README.md;C:/Development/Flight-Ops-clould-app/eureka-server/src/main/java/com/flightops/eureka/EurekaServerApplication.java;C:/Development/Flight-Ops-clould-app/eureka-server/pom.xml;C:/Development/Flight-Ops-clould-app/eureka-server/README.md;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/config/FeignClientConfig.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/config/RabbitMQConfig.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/controller/FlightController.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/dto/FlightDTO.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/entity/Flight.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/repository/FlightRepository.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/service/FlightService.java;C:/Development/Flight-Ops-clould-app/flight-service/src/main/java/com/flightops/flight/service/FlightServiceImpl.java;C:/Development/Flight-Ops-clould-app/flight-service/pom.xml;C:/Development/Flight-Ops-clould-app/flight-service/README.md;C:/Development/Flight-Ops-clould-app/monitoring/zipkin-server/src/main/java/com/flightops/zipkin/ZipkinServerApplication.java;C:/Development/Flight-Ops-clould-app/monitoring/zipkin-server/pom.xml;C:/Development/Flight-Ops-clould-app/monitoring/zipkin-server/README.md;C:/Development/Flight-Ops-clould-app/monitoring/grafana-dashboard.json;C:/Development/Flight-Ops-clould-app/notification-service/src/main/java/com/flightops/notification/config/RabbitMQConfig.java;C:/Development/Flight-Ops-clould-app/notification-service/src/main/java/com/flightops/notification/controller/NotificationController.java;C:/Development/Flight-Ops-clould-app/notification-service/src/main/java/com/flightops/notification/dto/NotificationDTO.java;C:/Development/Flight-Ops-clould-app/notification-service/src/main/java/com/flightops/notification/service/NotificationService.java;C:/Development/Flight-Ops-clould-app/notification-service/src/main/java/com/flightops/notification/service/NotificationServiceImpl.java;C:/Development/Flight-Ops-clould-app/notification-service/pom.xml;C:/Development/Flight-Ops-clould-app/notification-service/README.md;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/config/RabbitMQConfig.java;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/controller/UserController.java;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/dto/UserDTO.java;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/entity/User.java;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/repository/UserRepository.java;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/service/UserService.java;C:/Development/Flight-Ops-clould-app/user-management-service/src/main/java/com/flightops/user/service/UserServiceImpl.java;C:/Development/Flight-Ops-clould-app/user-management-service/pom.xml;C:/Development/Flight-Ops-clould-app/user-management-service/README.md;C:/Development/Flight-Ops-clould-app/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Development/Flight-Ops-clould-app&quot;:&quot;{\&quot;/crew-management-service/README.md\&quot;:\&quot;This file appears to be a documentation for a Crew Management Service. It does not contain any class or function definitions. The file provides an overview of the service and setup instructions for the project.\\n\\nThe file does the following:\\n\\n1. Provides an overview of the Crew Management Service, which handles crew assignments, crew availability, and updates in case of crew changes.\\n2. Provides setup instructions, including cloning the repository.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/service/UserServiceImpl.java\&quot;:\&quot;This file contains a single class, `UserServiceImpl`, which implements the `UserService` interface. The class provides CRUD (Create, Read, Update, Delete) operations for managing user data.\\n\\n`UserServiceImpl`: Implements the `UserService` interface to provide CRUD operations for managing user data.\\n\\n`createUser(UserDTO userDTO)`: Creates a new user based on the provided `UserDTO` object and returns the created user as a `UserDTO`.\\n\\n`getUserById(int id)`: Retrieves a user by their ID and returns the user as a `UserDTO`.\\n\\n`getAllUsers()`: Retrieves all users and returns them as a list of `UserDTO` objects.\\n\\n`updateUser(int id, UserDTO userDTO)`: Updates an existing user with the provided `UserDTO` object and returns the updated user as a `UserDTO`.\\n\\n`deleteUser(int id)`: Deletes a user by their ID.\&quot;,\&quot;/eureka-server/src/main/java/com/flightops/eureka/EurekaServerApplication.java\&quot;:\&quot;This file does not contain any classes or functions. Instead, it is a Spring Boot application that serves as a Eureka server. The `EurekaServerApplication` class is annotated with `@SpringBootApplication` and `@EnableEurekaServer`, which enables it to act as a service registry and discovery server for a microservices architecture. The `main()` method simply runs the Spring Boot application.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/dto/UserDTO.java\&quot;:\&quot;This file contains a single class, `UserDTO`, which is a data transfer object (DTO) for representing user information.\\n\\n`UserDTO`: A data transfer object that encapsulates user-related data, including user ID, username, email, and password.\\n\\nThe file does not contain any functions, as it only defines the class and its member variables (properties) with their corresponding getters and setters.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/entity/Crew.java\&quot;:\&quot;This file contains a single class, `Crew`, which represents a crew member in a flight operations system.\\n\\n`Crew`: This class represents a crew member, with properties for their ID, name, role, and contact information.\\n\\nThe file does not contain any functions, but rather defines the properties and their corresponding getters and setters for the `Crew` class, which is likely used for data persistence and management within the flight operations system.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftService.java\&quot;:\&quot;This file defines an interface called `AircraftService` that provides methods for managing aircraft data. The interface does not contain any classes, but rather defines the following functions:\\n\\n`createAircraft`: Creates a new aircraft based on the provided `AircraftDTO`.\\n`getAircraftById`: Retrieves an aircraft by its unique identifier.\\n`getAllAircraft`: Retrieves a list of all aircraft.\\n`updateAircraft`: Updates an existing aircraft with the provided `AircraftDTO`.\\n`deleteAircraft`: Deletes an aircraft by its unique identifier.\\n\\nThe purpose of this file is to define the contract for an `AircraftService` that can be implemented by a concrete service class. This allows for a separation of concerns between the service interface and its implementation, making the code more modular and testable.\&quot;,\&quot;/notification-service/src/main/java/com/flightops/notification/config/RabbitMQConfig.java\&quot;:\&quot;This file is a Spring configuration class that sets up a RabbitMQ connection and template.\\n\\n`RabbitMQConfig`: This class configures the RabbitMQ connection and template for the application.\\n\\n`rabbitTemplate`: This function creates a `RabbitTemplate` bean that can be used to interact with the RabbitMQ message broker.\&quot;,\&quot;/monitoring/zipkin-server/pom.xml\&quot;:\&quot;This file is a Maven Project Object Model (POM) file for a Spring Boot application that sets up a Zipkin server. It does not contain any classes or functions, but rather defines the project\\u0027s dependencies, build configuration, and other metadata.\\n\\nThe key elements of this POM file are:\\n\\n`project`: Defines the Maven project, including the group ID, artifact ID, and version.\\n`properties`: Specifies the Java version to be used for the project.\\n`dependencies`: Includes the Spring Cloud Starter Zipkin and Spring Boot Starter dependencies.\\n`dependencyManagement`: Manages the versions of the Spring Cloud dependencies.\\n`build`: Configures the Spring Boot Maven plugin to build the application.\\n\\nOverall, this POM file sets up the necessary configuration and dependencies for a Spring Boot application that will run a Zipkin server, which is a distributed tracing system used for monitoring and troubleshooting microservices-based applications.\&quot;,\&quot;/notification-service/src/main/java/com/flightops/notification/dto/NotificationDTO.java\&quot;:\&quot;This file contains a single class, `NotificationDTO`, which is a data transfer object (DTO) used to represent a notification. The class has three private fields: `recipient`, `message`, and `eventType`, along with their corresponding getters and setters.\\n\\n`NotificationDTO`: A data transfer object (DTO) that represents a notification, containing information about the recipient, message, and event type.\\n\\n`getRecipient()`, `setRecipient(String recipient)`, `getMessage()`, `setMessage(String message)`, `getEventType()`, `setEventType(String eventType)`: Getter and setter methods for the `recipient`, `message`, and `eventType` fields of the `NotificationDTO` class.\&quot;,\&quot;/notification-service/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is an overview of the Notification Service, which handles sending notifications and alerts to other microservices. The file also includes setup instructions for cloning the repository.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/service/UserService.java\&quot;:\&quot;This file defines an interface called `UserService` that provides methods for managing user-related operations in a flight operations application.\\n\\n`UserService`: An interface that defines the contract for user-related operations, including creating, retrieving, updating, and deleting users.\\n\\n`createUser(UserDTO userDTO)`: Creates a new user based on the provided `UserDTO` object.\\n`getUserById(int id)`: Retrieves a user by their unique identifier.\\n`getAllUsers()`: Retrieves a list of all users.\\n`updateUser(int id, UserDTO userDTO)`: Updates an existing user with the provided `UserDTO` object.\\n`deleteUser(int id)`: Deletes a user by their unique identifier.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/dto/FlightDTO.java\&quot;:\&quot;This file contains a single class, `FlightDTO`, which is a data transfer object (DTO) for representing flight information.\\n\\n`FlightDTO`: A class that represents the data associated with a flight, including the flight ID, flight number, scheduled time, updated time, and route ID.\\n\\n`flightId`: The unique identifier for the flight.\\n`flightNumber`: The number or code assigned to the flight.\\n`scheduledTime`: The scheduled departure or arrival time of the flight.\\n`updatedTime`: The time when the flight information was last updated.\\n`routeId`: The identifier for the route associated with the flight.\&quot;,\&quot;/config-server/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is a configuration file that provides an overview of the Config Server, which manages external properties for microservices. The file also includes setup instructions for cloning the repository.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/repository/FlightRepository.java\&quot;:\&quot;This file contains a single interface named `FlightRepository` that extends the `JpaRepository` interface provided by Spring Data JPA.\\n\\n`FlightRepository`: This interface provides a set of CRUD (Create, Read, Update, Delete) operations for the `Flight` entity.\\n\\nThe file does not contain any functions, as it is an interface that defines the contract for interacting with the `Flight` entity in the database using Spring Data JPA.\&quot;,\&quot;/notification-service/src/main/java/com/flightops/notification/service/NotificationServiceImpl.java\&quot;:\&quot;This file contains a single class and one function:\\n\\n`NotificationServiceImpl`: This class is responsible for sending notifications using RabbitMQ.\\n\\n`sendNotification`: This function takes a `NotificationDTO` object and sends it to the RabbitMQ exchange using the specified routing key.\\n\\nThe purpose of this file is to provide a service implementation for sending notifications. It uses the RabbitTemplate provided by the Spring AMQP library to publish notification messages to a RabbitMQ exchange.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/entity/Aircraft.java\&quot;:\&quot;This file contains a single class, `Aircraft`, which represents an aircraft entity in a database.\\n\\n`Aircraft`: This class represents an aircraft entity, with properties such as the aircraft ID, model, tail number, and capacity.\\n\\nThe file does not contain any functions, but rather focuses on defining the structure of the `Aircraft` entity using Java Persistence API (JPA) annotations.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/config/RabbitMQConfig.java\&quot;:\&quot;This file is a Spring configuration class that sets up a RabbitMQ connection and a RabbitTemplate bean.\\n\\n`RabbitMQConfig`: This class configures the RabbitMQ connection and RabbitTemplate.\\n\\n`rabbitTemplate`: This function creates a RabbitTemplate bean that can be used to interact with the RabbitMQ message broker.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/repository/UserRepository.java\&quot;:\&quot;This file contains a single interface named `UserRepository` that extends the `JpaRepository` interface provided by Spring Data JPA.\\n\\n`UserRepository`: This interface provides a set of CRUD (Create, Read, Update, Delete) operations for the `User` entity.\\n\\nThis file does not contain any classes or functions. It defines a repository interface that allows for the management of `User` entities in a database using the Spring Data JPA framework.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/service/CrewServiceImpl.java\&quot;:\&quot;This file contains a service implementation class for managing crew-related operations.\\n\\n`CrewServiceImpl`: Implements the `CrewService` interface and provides CRUD (Create, Read, Update, Delete) operations for managing crew data.\\n\\n`createCrew`: Creates a new crew member by mapping the `CrewDTO` object to a `Crew` entity and saving it to the database.\\n`getCrewById`: Retrieves a crew member by their ID and maps the `Crew` entity to a `CrewDTO` object.\\n`getAllCrew`: Retrieves all crew members and maps the `Crew` entities to a list of `CrewDTO` objects.\\n`updateCrew`: Updates an existing crew member by mapping the `CrewDTO` object to the corresponding `Crew` entity and saving the changes.\\n`deleteCrew`: Deletes a crew member by their ID.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/service/FlightService.java\&quot;:\&quot;This file defines an interface called `FlightService` that provides methods for managing flights. The interface does not contain any classes, but rather defines the following functions:\\n\\n`createFlight(FlightDTO flightDTO)`: Creates a new flight based on the provided `FlightDTO` object.\\n`getFlightById(int id)`: Retrieves a flight by its unique identifier.\\n`getAllFlights()`: Retrieves a list of all flights.\\n`updateFlight(int id, FlightDTO flightDTO)`: Updates an existing flight with the provided `FlightDTO` object.\\n`deleteFlight(int id)`: Deletes a flight by its unique identifier.\\n\\nThe purpose of this file is to define the contract for a service that manages flight-related operations, such as creating, retrieving, updating, and deleting flights.\&quot;,\&quot;/notification-service/src/main/java/com/flightops/notification/service/NotificationService.java\&quot;:\&quot;This file defines an interface called `NotificationService` that provides a single method `sendNotification()` for sending notifications.\\n\\n`NotificationService`: An interface that defines the contract for a service responsible for sending notifications.\\n\\n`sendNotification()`: A method that takes a `NotificationDTO` object and sends a notification based on the information provided in the DTO.\&quot;,\&quot;/notification-service/src/main/java/com/flightops/notification/controller/NotificationController.java\&quot;:\&quot;This file contains a single class and one function:\\n\\n`NotificationController`: This class is a REST controller that handles the sending of notifications.\\n\\n`sendNotification`: This function is responsible for sending a notification based on the provided `NotificationDTO`.\\n\\nThe file is part of a Spring Boot application that provides a RESTful API for managing notifications. The `NotificationController` class exposes a single endpoint (`/api/notifications`) that accepts a `NotificationDTO` object in the request body and delegates the actual sending of the notification to the `NotificationService`.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/service/FlightServiceImpl.java\&quot;:\&quot;This file contains a service implementation class for managing flights.\\n\\n`FlightServiceImpl`: Implements the `FlightService` interface and provides CRUD operations for managing flights.\\n\\n`createFlight`: Creates a new flight by mapping a `FlightDTO` to a `Flight` entity and saving it to the repository.\\n`getFlightById`: Retrieves a flight by its ID and maps it to a `FlightDTO`.\\n`getAllFlights`: Retrieves all flights from the repository and maps them to a list of `FlightDTO` objects.\\n`updateFlight`: Updates an existing flight by mapping a `FlightDTO` to the corresponding `Flight` entity and saving it to the repository.\\n`deleteFlight`: Deletes a flight by its ID.\&quot;,\&quot;/eureka-server/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is a documentation file that provides an overview of the Eureka Server, which is a service registry for managing microservices. The file also includes setup instructions for cloning the repository.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/controller/UserController.java\&quot;:\&quot;This file is a Spring Boot REST controller for managing user-related operations. It defines the following classes and functions:\\n\\n`UserController`: A REST controller class that handles user-related HTTP requests.\\n\\n`createUser`: Creates a new user based on the provided `UserDTO`.\\n`getUserById`: Retrieves a user by their unique identifier.\\n`getAllUsers`: Retrieves a list of all users.\\n`updateUser`: Updates an existing user based on the provided `UserDTO`.\\n`deleteUser`: Deletes a user by their unique identifier.\&quot;,\&quot;/config-server/pom.xml\&quot;:\&quot;This file is a Maven POM (Project Object Model) file for a Spring Cloud Config Server project. It defines the project\\u0027s dependencies, properties, and build configuration. There are no classes or functions defined in this file. Instead, it serves as a configuration file for the Spring Cloud Config Server application.\\n\\nThe key elements in this POM file are:\\n\\n`\\u003cproject\\u003e`: Defines the Maven project with the necessary XML namespaces and schema locations.\\n`\\u003cmodelVersion\\u003e`: Specifies the version of the Maven POM model, which is 4.0.0 in this case.\\n`\\u003cgroupId\\u003e`: Identifies the group or organization that the project belongs to, which is \\\&quot;com.flightops\\\&quot; in this case.\\n`\\u003cartifactId\\u003e`: Specifies the unique identifier for the project, which is \\\&quot;config-server\\\&quot; in this case.\\n`\\u003cversion\\u003e`: Defines the current version of the project, which is \\\&quot;1.0-SNAPSHOT\\\&quot; in this case.\\n`\\u003cproperties\\u003e`: Defines the Java version to be used, which is 17 in this case.\\n`\\u003cdependencies\\u003e`: Lists the project\\u0027s dependencies, including the Spring Cloud Config Server, Spring Boot Starter, and Spring Boot Actuator.\\n`\\u003cdependencyManagement\\u003e`: Manages the versions of the Spring Cloud dependencies, using the \\\&quot;2022.0.5\\\&quot; version.\\n`\\u003cbuild\\u003e`: Configures the Spring Boot Maven plugin to build the project.\&quot;,\&quot;/aircraft-management-service/pom.xml\&quot;:\&quot;This file is a Maven POM (Project Object Model) file for a Spring Boot application called \\\&quot;aircraft-management-service\\\&quot;. It defines the project\\u0027s dependencies, build configuration, and parent project. The file does not contain any classes or functions, but rather serves as a configuration file for the project.\\n\\nThe key elements of the POM file are:\\n\\n`\\u003cparent\\u003e`: Specifies the parent project, which is the Spring Boot starter parent.\\n`\\u003cproperties\\u003e`: Defines the Java version to be used for the project.\\n`\\u003cdependencyManagement\\u003e`: Manages the versions of the Spring Cloud dependencies.\\n`\\u003cdependencies\\u003e`: Lists the dependencies required for the project, including Spring Web, Spring Data JPA, Spring Cloud OpenFeign, Spring Cloud Eureka Client, Spring AMQP, Spring Actuator, ModelMapper, and Spring Cloud Circuit Breaker.\\n`\\u003cbuild\\u003e`: Configures the Spring Boot Maven plugin to build the project.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/dto/AircraftDTO.java\&quot;:\&quot;This file contains a single class, `AircraftDTO`, which is a data transfer object (DTO) for representing an aircraft. The file does not contain any functions, only getters and setters for the class\\u0027s properties.\\n\\n`AircraftDTO`: A data transfer object that represents an aircraft, containing properties for the aircraft\\u0027s ID, model, tail number, and capacity.\&quot;,\&quot;/config-server/src/main/java/com/flightops/config/ConfigServerApplication.java\&quot;:\&quot;This file does not contain any classes or functions. Instead, it is a Spring Boot application that serves as a configuration server. The `ConfigServerApplication` class is annotated with `@SpringBootApplication`, which is a convenience annotation that adds all of the following:\\n\\n1. `@Configuration`: Tags the class as a source of bean definitions for the application context.\\n2. `@EnableAutoConfiguration`: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.\\n3. `@EnableWebMvc`: Flags the application as a web application and activates key behaviors, such as setting up a `DispatcherServlet`.\\n4. `@ComponentScan`: Tells Spring to look for other components, configurations, and services in the `com/example` package.\\n\\nThe `main()` method uses Spring Boot\\u0027s `SpringApplication.run()` method to launch an application.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/entity/Flight.java\&quot;:\&quot;This file contains a single class, `Flight`, which represents a flight entity in a database.\\n\\n`Flight`: This class represents a flight entity, containing information such as the flight number, scheduled time, updated time, and the route ID.\\n\\nThe file does not contain any functions, but rather focuses on defining the properties and annotations for the `Flight` entity class.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/controller/FlightController.java\&quot;:\&quot;This file is a Spring Boot controller class for managing flights. It provides the following functionality:\\n\\n`FlightController`: A REST controller class that handles CRUD operations for flights.\\n\\n`createFlight`: Creates a new flight based on the provided `FlightDTO`.\\n`getFlightById`: Retrieves a flight by its ID.\\n`getAllFlights`: Retrieves a list of all flights.\\n`updateFlight`: Updates an existing flight based on the provided `FlightDTO` and ID.\\n`deleteFlight`: Deletes a flight by its ID.\&quot;,\&quot;/eureka-server/pom.xml\&quot;:\&quot;This file is a Maven Project Object Model (POM) file for a Spring Cloud Eureka Server project. It defines the project\\u0027s metadata, dependencies, and build configuration. There are no classes or functions defined in this file. Instead, this POM file sets up the necessary dependencies and configurations for a Eureka Server, which is a service discovery and registration server used in a microservices architecture.\&quot;,\&quot;/monitoring/zipkin-server/README.md\&quot;:\&quot;This file does not contain any classes or functions. It provides an overview of the Zipkin Server, which is used for distributed tracing of requests across microservices. The file also includes setup instructions, which involve cloning a repository.\&quot;,\&quot;/notification-service/pom.xml\&quot;:\&quot;This file is a Maven POM (Project Object Model) file for a Spring Boot project called \\\&quot;aircraft-management-service\\\&quot;. It defines the project\\u0027s dependencies, build configuration, and parent project. The project uses Spring Boot, Spring Cloud, and various other libraries to build a microservice application.\\n\\nThe file does not contain any classes or functions, but rather defines the project\\u0027s dependencies and build configuration.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/config/FeignClientConfig.java\&quot;:\&quot;This file does not contain any classes or functions. Instead, it defines a Feign client interface named `CrewClient` that is used to interact with the \\\&quot;crew-management-service\\\&quot; in a Spring Cloud application. The purpose of this file is to provide a centralized and abstracted way to communicate with the crew management service, which is likely a separate microservice within the application architecture.\&quot;,\&quot;/crew-management-service/pom.xml\&quot;:\&quot;This file is a Maven POM (Project Object Model) file for a Spring Boot project called \\\&quot;crew-management-service\\\&quot;. It defines the project\\u0027s dependencies, build configuration, and other metadata. The project appears to be a microservice that uses various Spring Cloud components, such as Feign, Eureka, and RabbitMQ, as well as Resilience4j for circuit breaker functionality. The project also uses ModelMapper for object mapping and Spring Boot Actuator for monitoring and management.\\n\\nSince this is a Maven POM file, it does not contain any classes or functions. The file is responsible for managing the project\\u0027s dependencies, build configuration, and other settings.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/service/CrewService.java\&quot;:\&quot;This file defines an interface called `CrewService` that provides methods for managing crew members in a flight operations system.\\n\\n`CrewService`: An interface that defines the operations for creating, retrieving, updating, and deleting crew members.\\n\\n`createCrew(CrewDTO crewDTO)`: Creates a new crew member based on the provided `CrewDTO` object.\\n`getCrewById(int id)`: Retrieves a crew member by their unique identifier.\\n`getAllCrew()`: Retrieves a list of all crew members.\\n`updateCrew(int id, CrewDTO crewDTO)`: Updates an existing crew member with the provided `CrewDTO` object.\\n`deleteCrew(int id)`: Deletes a crew member by their unique identifier.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/dto/CrewDTO.java\&quot;:\&quot;This file contains a single class:\\n\\n`CrewDTO`: A data transfer object (DTO) that represents a crew member, containing information such as their ID, name, role, and contact information.\\n\\nThere are no functions defined in this file. The purpose of this file is to provide a simple data structure to represent a crew member, which can be used for data transfer between different components of the application.\&quot;,\&quot;/user-management-service/pom.xml\&quot;:\&quot;This file is a Maven POM (Project Object Model) file for a Spring Boot project called \\\&quot;user-management-service\\\&quot;. It defines the project\\u0027s dependencies, build configuration, and other metadata. There are no explicit classes or functions defined in this file. The file sets up the project\\u0027s dependencies, including Spring Boot, Spring Cloud, and other libraries, and configures the build process using the Spring Boot Maven plugin.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/config/RabbitMQConfig.java\&quot;:\&quot;This file is a Spring configuration class that sets up a RabbitMQ connection and template.\\n\\n`RabbitMQConfig`: This class configures the RabbitMQ connection and template for the application.\\n\\n`rabbitTemplate`: This function creates a `RabbitTemplate` bean that can be used to interact with the RabbitMQ message broker.\&quot;,\&quot;/flight-service/README.md\&quot;:\&quot;This file appears to be a documentation for a \\\&quot;Flight Service\\\&quot; application. It does not contain any class or function definitions. The file provides an overview of the Flight Service, which manages flight schedules, flight paths, and cancellations, and includes setup instructions for cloning the repository.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/AircraftServiceApp.java\&quot;:\&quot;This file is a Spring Boot application that serves as the entry point for the Aircraft Service. It does not contain any classes or functions, but rather sets up the Spring Boot application and starts the application.\\n\\nThe file does the following:\\n\\n1. Imports the necessary Spring Boot classes.\\n2. Defines the `AircraftServiceApp` class and marks it as a Spring Boot application.\\n3. Provides the `main` method that runs the Spring Boot application.\&quot;,\&quot;/flight-service/pom.xml\&quot;:\&quot;This file is a Maven POM (Project Object Model) file for a Spring Boot project named \\\&quot;flight-service\\\&quot;. It defines the project\\u0027s dependencies, build configuration, and dependency management. The project is using Java 17 and includes the following dependencies:\\n\\n- `spring-boot-starter-web`: Provides the core functionality for building web applications with Spring MVC.\\n- `spring-boot-starter-data-jpa`: Provides the ability to interact with a database using the Java Persistence API (JPA).\\n- `spring-cloud-starter-openfeign`: Enables the use of the Feign client for making HTTP requests to other services.\\n- `spring-cloud-starter-netflix-eureka-client`: Allows the service to register with a Eureka service discovery server.\\n- `spring-cloud-starter-amqp`: Provides support for the Advanced Message Queuing Protocol (AMQP).\\n- `spring-boot-starter-actuator`: Adds production-ready features to the application, such as monitoring and management endpoints.\\n- `modelmapper`: Simplifies the mapping of objects between different data models.\\n- `spring-cloud-starter-circuitbreaker-resilience4j`: Provides circuit breaker functionality to handle failures in remote service calls.\\n- `spring-boot-starter-test`: Includes testing utilities and frameworks for unit and integration testing.\\n\\nThe file also includes dependency management for the Spring Cloud dependencies, ensuring that the versions of the included libraries are compatible with each other.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/controller/CrewController.java\&quot;:\&quot;This file contains a Spring Boot REST controller class for managing crew-related operations.\\n\\n`CrewController`: This class is responsible for handling HTTP requests related to crew management, such as creating, retrieving, updating, and deleting crew members.\\n\\n`createCrew`: This function creates a new crew member based on the provided `CrewDTO` object.\\n`getCrewById`: This function retrieves a crew member by its unique identifier.\\n`getAllCrew`: This function retrieves a list of all crew members.\\n`updateCrew`: This function updates an existing crew member based on the provided `CrewDTO` object and the unique identifier.\\n`deleteCrew`: This function deletes a crew member by its unique identifier.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftServiceImpl.java\&quot;:\&quot;This file contains a service implementation class for managing aircraft data.\\n\\n`AircraftServiceImpl`: Implements the `AircraftService` interface, providing CRUD operations for aircraft data.\\n\\n`createAircraft`: Creates a new aircraft and saves it to the repository.\\n`getAircraftById`: Retrieves an aircraft by its ID from the repository.\\n`getAllAircraft`: Retrieves all aircraft from the repository.\\n`updateAircraft`: Updates an existing aircraft in the repository.\\n`deleteAircraft`: Deletes an aircraft from the repository by its ID.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/repository/AircraftRepository.java\&quot;:\&quot;This file contains a single interface:\\n\\n`AircraftRepository`: This interface extends the `JpaRepository` interface and provides a way to interact with the `Aircraft` entity in the database.\\n\\nThis file does not contain any classes or functions. It defines a repository interface that provides basic CRUD (Create, Read, Update, Delete) operations for the `Aircraft` entity using the Spring Data JPA framework.\&quot;,\&quot;/crew-management-service/src/main/java/com/flightops/crew/repository/CrewRepository.java\&quot;:\&quot;This file contains a single interface named `CrewRepository` that extends the `JpaRepository` interface provided by Spring Data JPA.\\n\\n`CrewRepository`: This interface provides a set of CRUD (Create, Read, Update, Delete) operations for the `Crew` entity.\\n\\nThis file does not contain any classes or functions. It defines a repository interface that allows for the management of `Crew` entities in a database using the Spring Data JPA framework.\&quot;,\&quot;/flight-service/src/main/java/com/flightops/flight/config/RabbitMQConfig.java\&quot;:\&quot;This file is a Spring configuration class that sets up a RabbitMQ connection and template.\\n\\n`RabbitMQConfig`: A configuration class that sets up a RabbitMQ connection and template.\\n\\n`rabbitTemplate`: A bean that creates a RabbitTemplate instance using the provided ConnectionFactory.\&quot;,\&quot;/aircraft-management-service/README.md\&quot;:\&quot;This file appears to be a documentation for an \\\&quot;Aircraft Management Service\\\&quot; and does not contain any class or function definitions. The file provides an overview of the service and setup instructions for the project.\\n\\nThe file does the following:\\n\\n1. Provides an overview of the Aircraft Management Service, which manages aircraft assignments, maintenance schedules, and tail assignments.\\n2. Includes setup instructions, starting with cloning the repository.\&quot;,\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/controller/AircraftController.java\&quot;:\&quot;This file contains a Spring Boot REST controller for managing aircraft data.\\n\\n`AircraftController`: A REST controller that handles CRUD operations for aircraft.\\n\\n`createAircraft`: Creates a new aircraft based on the provided `AircraftDTO`.\\n`getAircraftById`: Retrieves an aircraft by its ID.\\n`getAllAircraft`: Retrieves a list of all aircraft.\\n`updateAircraft`: Updates an existing aircraft based on the provided `AircraftDTO`.\\n`deleteAircraft`: Deletes an aircraft by its ID.\&quot;,\&quot;/monitoring/zipkin-server/src/main/java/com/flightops/zipkin/ZipkinServerApplication.java\&quot;:\&quot;This file is a Spring Boot application that runs a Zipkin server. It does not contain any classes or functions, but rather serves as the entry point for the Zipkin server application.\\n\\nThe file does the following:\\n\\n1. Imports the necessary Spring Boot classes.\\n2. Defines a `@SpringBootApplication` class named `ZipkinServerApplication`.\\n3. Provides a `main()` method that runs the Spring application.\&quot;,\&quot;/user-management-service/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is a documentation file that provides an overview of the User Management Service and setup instructions. The service handles user accounts, authentication, and roles.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/entity/User.java\&quot;:\&quot;This file contains a single class, `User`, which represents a user entity in a database.\\n\\n`User`: This class represents a user entity in the database, with properties for user ID, username, email, and password.\\n\\nThe file does not contain any functions, but rather focuses on defining the structure of the `User` entity using Java Persistence API (JPA) annotations.\&quot;,\&quot;/user-management-service/src/main/java/com/flightops/user/config/RabbitMQConfig.java\&quot;:\&quot;This file is a Spring configuration class that sets up a RabbitMQ connection and template.\\n\\n`RabbitMQConfig`: This class configures the RabbitMQ connection and template.\\n\\n`rabbitTemplate`: This function creates a RabbitTemplate bean that can be used to interact with RabbitMQ.\&quot;,\&quot;/README.md\&quot;:\&quot;This file does not contain any classes or functions. It provides an overview of the Flight Operations System, which is a microservices architecture that handles various aspects of flight operations, including crew management, aircraft management, notifications, and user management. The file also includes setup instructions for cloning the repository.\&quot;,\&quot;/monitoring/grafana-dashboard.json\&quot;:\&quot;This file appears to be a JSON configuration for a dashboard, which likely represents a visualization or monitoring tool for flight operations. It does not contain any classes or functions, but rather defines the structure and content of the dashboard.\\n\\nThe file defines a `dashboard` object with the following properties:\\n\\n`dashboard`: This object represents the overall dashboard configuration, including its title and the panels it contains.\\n\\n`title`: This property sets the title of the dashboard to \\\&quot;Flight Operations Monitoring\\\&quot;.\\n\\n`panels`: This property is an array of panel configurations, each representing a visualization or data display within the dashboard.\\n\\nThe first (and only) panel in the `panels` array has the following properties:\\n\\n`title`: This property sets the title of the panel to \\\&quot;Flight Service Requests\\\&quot;.\\n\\n`type`: This property sets the type of the panel to \\\&quot;graph\\\&quot;, indicating that it will display a graph or chart.\\n\\n`targets`: This property is an array of data sources or metrics that the panel will display. In this case, it contains a single target named \\\&quot;flight-service_requests_total\\\&quot;.\\n\\nOverall, this file defines the structure and content of a dashboard for monitoring flight operations, with a single panel displaying a graph of the total number of flight service requests.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Development/Flight-Ops-clould-app&quot;:&quot;{\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/config/RabbitMQConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/config/RabbitMQConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;RabbitMQConfig.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;rabbitTemplate\&quot;,\&quot;method_parameters\&quot;:\&quot;(ConnectionFactory connectionFactory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ConnectionFactory\&quot;,\&quot;name\&quot;:\&quot;connectionFactory\&quot;}],\&quot;return_type\&quot;:\&quot;RabbitTemplate\&quot;,\&quot;scope\&quot;:[[10,4],[13,5]]}]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/controller/AircraftController.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/controller/AircraftController.java\&quot;,\&quot;file_name\&quot;:\&quot;AircraftController.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(@RequestBody AircraftDTO aircraftDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;name\&quot;:\&quot;aircraftDTO\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getAircraftById\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getAllAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[26,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;updateAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id, @RequestBody AircraftDTO aircraftDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;name\&quot;:\&quot;aircraftDTO\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[31,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;deleteAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[39,5]]}]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/dto/AircraftDTO.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/dto/AircraftDTO.java\&quot;,\&quot;file_name\&quot;:\&quot;AircraftDTO.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/entity/Aircraft.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/entity/Aircraft.java\&quot;,\&quot;file_name\&quot;:\&quot;Aircraft.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/repository/AircraftRepository.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/repository/AircraftRepository.java\&quot;,\&quot;file_name\&quot;:\&quot;AircraftRepository.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftService.java\&quot;,\&quot;file_name\&quot;:\&quot;AircraftService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(AircraftDTO aircraftDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;name\&quot;:\&quot;aircraftDTO\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[7,4],[7,56]]},{\&quot;method_name\&quot;:\&quot;getAircraftById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[8,4],[8,40]]},{\&quot;method_name\&quot;:\&quot;getAllAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,4],[9,39]]},{\&quot;method_name\&quot;:\&quot;updateAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, AircraftDTO aircraftDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;name\&quot;:\&quot;aircraftDTO\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[10,4],[10,64]]},{\&quot;method_name\&quot;:\&quot;deleteAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[11,4],[11,32]]}]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftServiceImpl.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/service/AircraftServiceImpl.java\&quot;,\&quot;file_name\&quot;:\&quot;AircraftServiceImpl.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(AircraftDTO aircraftDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;name\&quot;:\&quot;aircraftDTO\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[21,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getAircraftById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getAllAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;updateAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, AircraftDTO aircraftDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;name\&quot;:\&quot;aircraftDTO\&quot;}],\&quot;return_type\&quot;:\&quot;AircraftDTO\&quot;,\&quot;scope\&quot;:[[41,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;deleteAircraft\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[52,5]]}]},\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/AircraftServiceApp.java\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/src/main/java/com/flightops/aircraft/AircraftServiceApp.java\&quot;,\&quot;file_name\&quot;:\&quot;AircraftServiceApp.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,8],[10,9]]}]},\&quot;/aircraft-management-service/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/aircraft-management-service/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/aircraft-management-service/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/config-server/src/main/java/com/flightops/config/ConfigServerApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/config-server/src/main/java/com/flightops/config/ConfigServerApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;ConfigServerApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[7,4],[9,5]]}]},\&quot;/config-server/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/config-server/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/config-server/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/config-server/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/config/RabbitMQConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/config/RabbitMQConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;RabbitMQConfig.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;rabbitTemplate\&quot;,\&quot;method_parameters\&quot;:\&quot;(ConnectionFactory connectionFactory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ConnectionFactory\&quot;,\&quot;name\&quot;:\&quot;connectionFactory\&quot;}],\&quot;return_type\&quot;:\&quot;RabbitTemplate\&quot;,\&quot;scope\&quot;:[[10,4],[13,5]]}]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/controller/CrewController.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/controller/CrewController.java\&quot;,\&quot;file_name\&quot;:\&quot;CrewController.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(@RequestBody CrewDTO crewDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;CrewDTO\&quot;,\&quot;name\&quot;:\&quot;crewDTO\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getCrewById\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getAllCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[26,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;updateCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id, @RequestBody CrewDTO crewDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;CrewDTO\&quot;,\&quot;name\&quot;:\&quot;crewDTO\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[31,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;deleteCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[39,5]]}]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/dto/CrewDTO.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/dto/CrewDTO.java\&quot;,\&quot;file_name\&quot;:\&quot;CrewDTO.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/entity/Crew.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/entity/Crew.java\&quot;,\&quot;file_name\&quot;:\&quot;Crew.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/repository/CrewRepository.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/repository/CrewRepository.java\&quot;,\&quot;file_name\&quot;:\&quot;CrewRepository.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/service/CrewService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/service/CrewService.java\&quot;,\&quot;file_name\&quot;:\&quot;CrewService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(CrewDTO crewDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;CrewDTO\&quot;,\&quot;name\&quot;:\&quot;crewDTO\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[7,4],[7,40]]},{\&quot;method_name\&quot;:\&quot;getCrewById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[8,4],[8,32]]},{\&quot;method_name\&quot;:\&quot;getAllCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,4],[9,31]]},{\&quot;method_name\&quot;:\&quot;updateCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, CrewDTO crewDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;CrewDTO\&quot;,\&quot;name\&quot;:\&quot;crewDTO\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[10,4],[10,48]]},{\&quot;method_name\&quot;:\&quot;deleteCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[11,4],[11,28]]}]},\&quot;/crew-management-service/src/main/java/com/flightops/crew/service/CrewServiceImpl.java\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/src/main/java/com/flightops/crew/service/CrewServiceImpl.java\&quot;,\&quot;file_name\&quot;:\&quot;CrewServiceImpl.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(CrewDTO crewDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;CrewDTO\&quot;,\&quot;name\&quot;:\&quot;crewDTO\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[21,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getCrewById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getAllCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;updateCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, CrewDTO crewDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;CrewDTO\&quot;,\&quot;name\&quot;:\&quot;crewDTO\&quot;}],\&quot;return_type\&quot;:\&quot;CrewDTO\&quot;,\&quot;scope\&quot;:[[41,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;deleteCrew\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[52,5]]}]},\&quot;/crew-management-service/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/crew-management-service/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/crew-management-service/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/eureka-server/src/main/java/com/flightops/eureka/EurekaServerApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/eureka-server/src/main/java/com/flightops/eureka/EurekaServerApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;EurekaServerApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,4],[10,5]]}]},\&quot;/eureka-server/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/eureka-server/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/eureka-server/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/eureka-server/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/flight-service/src/main/java/com/flightops/flight/config/FeignClientConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/config/FeignClientConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;FeignClientConfig.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/flight-service/src/main/java/com/flightops/flight/config/RabbitMQConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/config/RabbitMQConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;RabbitMQConfig.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;rabbitTemplate\&quot;,\&quot;method_parameters\&quot;:\&quot;(ConnectionFactory connectionFactory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ConnectionFactory\&quot;,\&quot;name\&quot;:\&quot;connectionFactory\&quot;}],\&quot;return_type\&quot;:\&quot;RabbitTemplate\&quot;,\&quot;scope\&quot;:[[10,4],[13,5]]}]},\&quot;/flight-service/src/main/java/com/flightops/flight/controller/FlightController.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/controller/FlightController.java\&quot;,\&quot;file_name\&quot;:\&quot;FlightController.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(@RequestBody FlightDTO flightDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;FlightDTO\&quot;,\&quot;name\&quot;:\&quot;flightDTO\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getFlightById\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getAllFlights\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[26,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;updateFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id, @RequestBody FlightDTO flightDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;FlightDTO\&quot;,\&quot;name\&quot;:\&quot;flightDTO\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[31,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;deleteFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[39,5]]}]},\&quot;/flight-service/src/main/java/com/flightops/flight/dto/FlightDTO.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/dto/FlightDTO.java\&quot;,\&quot;file_name\&quot;:\&quot;FlightDTO.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/flight-service/src/main/java/com/flightops/flight/entity/Flight.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/entity/Flight.java\&quot;,\&quot;file_name\&quot;:\&quot;Flight.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/flight-service/src/main/java/com/flightops/flight/repository/FlightRepository.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/repository/FlightRepository.java\&quot;,\&quot;file_name\&quot;:\&quot;FlightRepository.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/flight-service/src/main/java/com/flightops/flight/service/FlightService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/service/FlightService.java\&quot;,\&quot;file_name\&quot;:\&quot;FlightService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlightDTO flightDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;FlightDTO\&quot;,\&quot;name\&quot;:\&quot;flightDTO\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[7,4],[7,48]]},{\&quot;method_name\&quot;:\&quot;getFlightById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[8,4],[8,36]]},{\&quot;method_name\&quot;:\&quot;getAllFlights\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,4],[9,36]]},{\&quot;method_name\&quot;:\&quot;updateFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, FlightDTO flightDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;FlightDTO\&quot;,\&quot;name\&quot;:\&quot;flightDTO\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[10,4],[10,56]]},{\&quot;method_name\&quot;:\&quot;deleteFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[11,4],[11,30]]}]},\&quot;/flight-service/src/main/java/com/flightops/flight/service/FlightServiceImpl.java\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/src/main/java/com/flightops/flight/service/FlightServiceImpl.java\&quot;,\&quot;file_name\&quot;:\&quot;FlightServiceImpl.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlightDTO flightDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;FlightDTO\&quot;,\&quot;name\&quot;:\&quot;flightDTO\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[21,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getFlightById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getAllFlights\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;updateFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, FlightDTO flightDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;FlightDTO\&quot;,\&quot;name\&quot;:\&quot;flightDTO\&quot;}],\&quot;return_type\&quot;:\&quot;FlightDTO\&quot;,\&quot;scope\&quot;:[[41,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;deleteFlight\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[52,5]]}]},\&quot;/flight-service/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/flight-service/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/flight-service/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/monitoring/zipkin-server/src/main/java/com/flightops/zipkin/ZipkinServerApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/monitoring/zipkin-server/src/main/java/com/flightops/zipkin/ZipkinServerApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;ZipkinServerApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[7,4],[9,5]]}]},\&quot;/monitoring/zipkin-server/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/monitoring/zipkin-server/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/monitoring/zipkin-server/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/monitoring/zipkin-server/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/monitoring/grafana-dashboard.json\&quot;:{\&quot;file_path\&quot;:\&quot;/monitoring/grafana-dashboard.json\&quot;,\&quot;file_name\&quot;:\&quot;grafana-dashboard.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/notification-service/src/main/java/com/flightops/notification/config/RabbitMQConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/src/main/java/com/flightops/notification/config/RabbitMQConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;RabbitMQConfig.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;rabbitTemplate\&quot;,\&quot;method_parameters\&quot;:\&quot;(ConnectionFactory connectionFactory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ConnectionFactory\&quot;,\&quot;name\&quot;:\&quot;connectionFactory\&quot;}],\&quot;return_type\&quot;:\&quot;RabbitTemplate\&quot;,\&quot;scope\&quot;:[[10,4],[13,5]]}]},\&quot;/notification-service/src/main/java/com/flightops/notification/controller/NotificationController.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/src/main/java/com/flightops/notification/controller/NotificationController.java\&quot;,\&quot;file_name\&quot;:\&quot;NotificationController.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;sendNotification\&quot;,\&quot;method_parameters\&quot;:\&quot;(@RequestBody NotificationDTO notificationDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;NotificationDTO\&quot;,\&quot;name\&quot;:\&quot;notificationDTO\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[14,4],[17,5]]}]},\&quot;/notification-service/src/main/java/com/flightops/notification/dto/NotificationDTO.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/src/main/java/com/flightops/notification/dto/NotificationDTO.java\&quot;,\&quot;file_name\&quot;:\&quot;NotificationDTO.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/notification-service/src/main/java/com/flightops/notification/service/NotificationService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/src/main/java/com/flightops/notification/service/NotificationService.java\&quot;,\&quot;file_name\&quot;:\&quot;NotificationService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;sendNotification\&quot;,\&quot;method_parameters\&quot;:\&quot;(NotificationDTO notificationDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;NotificationDTO\&quot;,\&quot;name\&quot;:\&quot;notificationDTO\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[5,4],[5,59]]}]},\&quot;/notification-service/src/main/java/com/flightops/notification/service/NotificationServiceImpl.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/src/main/java/com/flightops/notification/service/NotificationServiceImpl.java\&quot;,\&quot;file_name\&quot;:\&quot;NotificationServiceImpl.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;sendNotification\&quot;,\&quot;method_parameters\&quot;:\&quot;(NotificationDTO notificationDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;NotificationDTO\&quot;,\&quot;name\&quot;:\&quot;notificationDTO\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]}]},\&quot;/notification-service/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/notification-service/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/notification-service/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/user-management-service/src/main/java/com/flightops/user/config/RabbitMQConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/config/RabbitMQConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;RabbitMQConfig.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;rabbitTemplate\&quot;,\&quot;method_parameters\&quot;:\&quot;(ConnectionFactory connectionFactory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ConnectionFactory\&quot;,\&quot;name\&quot;:\&quot;connectionFactory\&quot;}],\&quot;return_type\&quot;:\&quot;RabbitTemplate\&quot;,\&quot;scope\&quot;:[[10,4],[13,5]]}]},\&quot;/user-management-service/src/main/java/com/flightops/user/controller/UserController.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/controller/UserController.java\&quot;,\&quot;file_name\&quot;:\&quot;UserController.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(@RequestBody UserDTO userDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;UserDTO\&quot;,\&quot;name\&quot;:\&quot;userDTO\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getUserById\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getAllUsers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[26,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;updateUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id, @RequestBody UserDTO userDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;UserDTO\&quot;,\&quot;name\&quot;:\&quot;userDTO\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[31,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;deleteUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(@PathVariable int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[39,5]]}]},\&quot;/user-management-service/src/main/java/com/flightops/user/dto/UserDTO.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/dto/UserDTO.java\&quot;,\&quot;file_name\&quot;:\&quot;UserDTO.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/user-management-service/src/main/java/com/flightops/user/entity/User.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/entity/User.java\&quot;,\&quot;file_name\&quot;:\&quot;User.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/user-management-service/src/main/java/com/flightops/user/repository/UserRepository.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/repository/UserRepository.java\&quot;,\&quot;file_name\&quot;:\&quot;UserRepository.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/user-management-service/src/main/java/com/flightops/user/service/UserService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/service/UserService.java\&quot;,\&quot;file_name\&quot;:\&quot;UserService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(UserDTO userDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;UserDTO\&quot;,\&quot;name\&quot;:\&quot;userDTO\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[7,4],[7,40]]},{\&quot;method_name\&quot;:\&quot;getUserById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[8,4],[8,32]]},{\&quot;method_name\&quot;:\&quot;getAllUsers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,4],[9,32]]},{\&quot;method_name\&quot;:\&quot;updateUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, UserDTO userDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;UserDTO\&quot;,\&quot;name\&quot;:\&quot;userDTO\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[10,4],[10,48]]},{\&quot;method_name\&quot;:\&quot;deleteUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[11,4],[11,28]]}]},\&quot;/user-management-service/src/main/java/com/flightops/user/service/UserServiceImpl.java\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/src/main/java/com/flightops/user/service/UserServiceImpl.java\&quot;,\&quot;file_name\&quot;:\&quot;UserServiceImpl.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(UserDTO userDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;UserDTO\&quot;,\&quot;name\&quot;:\&quot;userDTO\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[21,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getUserById\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getAllUsers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;updateUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id, UserDTO userDTO)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;},{\&quot;type\&quot;:\&quot;UserDTO\&quot;,\&quot;name\&quot;:\&quot;userDTO\&quot;}],\&quot;return_type\&quot;:\&quot;UserDTO\&quot;,\&quot;scope\&quot;:[[41,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;deleteUser\&quot;,\&quot;method_parameters\&quot;:\&quot;(int id)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;id\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[52,5]]}]},\&quot;/user-management-service/pom.xml\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/pom.xml\&quot;,\&quot;file_name\&quot;:\&quot;pom.xml\&quot;,\&quot;methods\&quot;:[]},\&quot;/user-management-service/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/user-management-service/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>